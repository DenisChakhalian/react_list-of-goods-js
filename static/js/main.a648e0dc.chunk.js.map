{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","isReversedOrSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","isReversedPrev","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA0BnB,IAAMC,EAAM,WACjB,MAAkCC,mBA1BT,IA0BzB,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAwBF,GAAcF,EAEtCK,EA7BR,SAA0BC,EAAON,EAAWE,GAC1C,IAAMK,EAAa,YAAOD,GAmB1B,OAjBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EACH,OAAOa,EAAME,cAAcD,GAC7B,KAAKb,EACH,OAAOY,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAKXV,GACFK,EAAcM,UAGTN,EAScO,CAAiBnB,EAAiBK,EAAWE,GAOlE,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYjB,IAAcJ,IAE5BsB,QAAS,kBAAMjB,EAAaL,IAL9B,iCAUA,wBACEoB,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAcH,IAE5BqB,QAAS,kBAAMjB,EAAaJ,IAL9B,4BAUA,wBACEmB,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAA2B,IAAff,IAEdgB,QAAS,kBAAMf,GAAc,SAAAgB,GAAc,OAAKA,MALlD,uBAUGf,GACH,wBACEY,KAAK,SACLD,UAAU,4BACVG,QA1CmB,WACzBjB,EAlCuB,IAmCvBE,GAAc,IAqCV,sBAWF,6BACGE,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCvGjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a648e0dc.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\nconst SORT_FIELD_DEFAULT = '';\n\nfunction getPreparedGoods(goods, sortField, isReversed) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SORT_FIELD_DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const isReversedOrSortField = isReversed || sortField;\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  const onClickResetHandle = () => {\n    setSortField(SORT_FIELD_DEFAULT);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SORT_FIELD_ALPHABET,\n          })}\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': isReversed !== true,\n          })}\n          onClick={() => setIsReversed(isReversedPrev => !isReversedPrev)}\n        >\n          Reverse\n        </button>\n\n        {!!isReversedOrSortField && (\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={onClickResetHandle}\n        >\n          Reset\n        </button>\n        )\n      }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}